import requests
from datetime import datetime
from zoneinfo import ZoneInfo
import time
import traceback
import hmac
import hashlib
import json
import os
import threading
import gradio as gr
from dotenv import load_dotenv

# ========== C·∫§U H√åNH ==========
VIETNAM_TIMEZONE = ZoneInfo("Asia/Ho_Chi_Minh")
CHART_TYPE = "5m"
LEVERAGE = 30
SL_BUFFER_PERCENT = 0.001
SMALL_WICK_THRESHOLD = 0.05 # R√¢u n·∫øn c√≤n l·∫°i ph·∫£i nh·ªè h∆°n 0.05%

# L·∫•y c·∫•u h√¨nh API OKX t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()  # Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
OKX_API_KEY = os.environ.get("OKX_API_KEY")
OKX_SECRET_KEY = os.environ.get("OKX_SECRET_KEY")
OKX_PASSPHRASE = os.environ.get("OKX_PASSPHRASE")
OKX_BASE_URL = "https://www.okx.com"

# C·∫•u h√¨nh Slack
SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
SLACK_CHANNEL = os.environ.get("SLACK_CHANNEL", "#trading-alerts")

# Ki·ªÉm tra n·∫øu c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë∆∞·ª£c thi·∫øt l·∫≠p
if not OKX_API_KEY:
    print("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng OKX_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
    exit(1)
if not OKX_SECRET_KEY:
    print("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng OKX_SECRET_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
    exit(1)
if not OKX_PASSPHRASE:
    print("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng OKX_PASSPHRASE ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
    exit(1)

# <<< TRUNG T√ÇM C·∫§U H√åNH CHO T·ª™NG SYMBOL >>>
SYMBOLS = [
    {
        "symbol": "BTC-USDT-SWAP",
        "wick_threshold": 0.35,
        "position_size_usdt": 10,
        "volume_multiplier": 2.0,
        "rr_ratio": 1.5 # T·ª∑ l·ªá R:R
    },
    {
        "symbol": "ETH-USDT-SWAP",
        "wick_threshold": 0.6,
        "position_size_usdt": 10,
        "volume_multiplier": 1.3,
        "rr_ratio": 1.5
    },
    {
        "symbol": "BNB-USDT-SWAP",
        "wick_threshold": 0.4,
        "position_size_usdt": 10,
        "volume_multiplier": 1.5,
        "rr_ratio": 1
    },
    {
        "symbol": "ADA-USDT-SWAP",
        "wick_threshold": 0.8,
        "position_size_usdt": 10,
        "volume_multiplier": 1.3,
        "rr_ratio": 1
    },
    {
        "symbol": "DOGE-USDT-SWAP",
        "wick_threshold": 0.8,
        "position_size_usdt": 10,
        "volume_multiplier": 1.5,
        "rr_ratio": 1
    },
    {
        "symbol": "ETC-USDT-SWAP",
        "wick_threshold": 0.72,
        "position_size_usdt": 10,
        "volume_multiplier": 1.5,
        "rr_ratio": 2
    },
    {
        "symbol": "TON-USDT-SWAP",
        "wick_threshold": 0.55,
        "position_size_usdt": 10,
        "volume_multiplier": 1.5,
        "rr_ratio": 1.5
    }
]

# ======= SLACK FUNCTIONS =======
def send_slack_alert(message, is_critical=False):
    """G·ª≠i c·∫£nh b√°o ƒë·∫øn Slack channel"""
    if not SLACK_WEBHOOK_URL:
        print("‚ö†Ô∏è Slack webhook ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
        return
    
    try:
        prefix = "üö® *C·∫¢NH B√ÅO NGHI√äM TR·ªåNG* üö®\n" if is_critical else "‚ö†Ô∏è *C·∫¢NH B√ÅO* ‚ö†Ô∏è\n"
        formatted_message = prefix + message
        
        payload = {
            "text": formatted_message,
            "channel": SLACK_CHANNEL,
            "username": "Trading Bot",
            "icon_emoji": ":robot_face:"
        }
        
        response = requests.post(
            SLACK_WEBHOOK_URL,
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ ƒê√£ g·ª≠i c·∫£nh b√°o ƒë·∫øn Slack")
        else:
            print(f"‚ùå L·ªói g·ª≠i Slack: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Slack alert error: {e}")

def send_slack_notification(sym_config, candle, analysis, order_info=None):
    """G·ª≠i th√¥ng b√°o n·∫øn v√† l·ªánh ƒë·∫øn Slack"""
    if not SLACK_WEBHOOK_URL:
        return
        
    if analysis["candle_type"] == "other": 
        return
    
    try:
        coin_name = sym_config['symbol'].replace("-SWAP", "")
        timestamp = candle['close_time'].astimezone(VIETNAM_TIMEZONE).strftime('%Y-%m-%d %H:%M:%S')
        
        # T·∫°o message cho Slack
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": f"{coin_name} - N·∫øn {analysis['candle_type'].upper()}",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*‚è∞ Th·ªùi gian:*\n{timestamp}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*üìä Volume:*\n{analysis['volume']:.2f} (x{analysis['volume_multiplier']:.1f})"
                    }
                ]
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*üìà Open:* {analysis['open']:.8f}\n*üìâ Close:* {analysis['close']:.8f}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*üî∫ High:* {analysis['high']:.8f}\n*üîª Low:* {analysis['low']:.8f}"
                    }
                ]
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*üîº R√¢u tr√™n:* {analysis['upper_wick_percent']:.4f}%"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*üîΩ R√¢u d∆∞·ªõi:* {analysis['lower_wick_percent']:.4f}%"
                    }
                ]
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*üéØ T√≠n hi·ªáu:* {analysis['trend_direction']}"
                }
            }
        ]
        
        # Th√™m th√¥ng tin l·ªánh n·∫øu c√≥
        if order_info:
            blocks.extend([
                {
                    "type": "divider"
                },
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "üíº TH√îNG TIN L·ªÜNH",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {
                            "type": "mrkdwn",
                            "text": f"*üéØ Entry:* {order_info['entry_price']:.8f}\n*üõë Stop Loss:* {order_info['stop_loss']:.8f}"
                        },
                        {
                            "type": "mrkdwn",
                            "text": f"*‚úÖ Take Profit:* {order_info['take_profit']:.8f}\n*üìà R:R:* 1:{sym_config['rr_ratio']}"
                        }
                    ]
                },
                {
                    "type": "section",
                    "fields": [
                        {
                            "type": "mrkdwn",
                            "text": f"*‚ö° ƒê√≤n b·∫©y:* x{LEVERAGE}\n*üí∞ K√≠ch th∆∞·ªõc:* {sym_config['position_size_usdt']} USDT"
                        },
                        {
                            "type": "mrkdwn",
                            "text": f"*üìä S·ªë l∆∞·ª£ng:* {order_info['size']} {coin_name.split('-')[0]}"
                        }
                    ]
                }
            ])
        
        payload = {
            "channel": SLACK_CHANNEL,
            "username": "Trading Bot",
            "icon_emoji": ":chart_with_upwards_trend:",
            "blocks": blocks
        }
        
        response = requests.post(
            SLACK_WEBHOOK_URL,
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            print(f"   ‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o Slack cho {sym_config['symbol']}")
        else:
            print(f"‚ùå L·ªói g·ª≠i Slack: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i Slack notification: {e}")

def send_slack_balance_alert(sym_config, balance):
    """G·ª≠i c·∫£nh b√°o s·ªë d∆∞ ƒë·∫øn Slack"""
    if not SLACK_WEBHOOK_URL:
        return
        
    try:
        coin_name = sym_config['symbol'].replace("-SWAP", "")
        
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "üí∞ C·∫¢NH B√ÅO S·ªê D∆Ø",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*üìä Symbol:*\n{coin_name}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*üíµ S·ªë d∆∞ hi·ªán t·∫°i:*\n{balance:.2f} USDT"
                    }
                ]
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*üí∞ Y√™u c·∫ßu t·ªëi thi·ªÉu:*\n{sym_config['position_size_usdt']} USDT"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*‚ùå Status:*\nKh√¥ng ƒë·ªß s·ªë d∆∞"
                    }
                ]
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "‚ö†Ô∏è *Vui l√≤ng n·∫°p th√™m ti·ªÅn v√†o t√†i kho·∫£n!*"
                }
            }
        ]
        
        payload = {
            "channel": SLACK_CHANNEL,
            "username": "Trading Bot",
            "icon_emoji": ":money_with_wings:",
            "blocks": blocks
        }
        
        response = requests.post(
            SLACK_WEBHOOK_URL,
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            print(f"   ‚úÖ ƒê√£ g·ª≠i c·∫£nh b√°o s·ªë d∆∞ Slack cho {sym_config['symbol']}")
        else:
            print(f"‚ùå L·ªói g·ª≠i Slack balance alert: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i c·∫£nh b√°o s·ªë d∆∞ Slack: {e}")

# ======= OKX API FUNCTIONS =======
def okx_signature(timestamp, method, request_path, body=""):
    message = timestamp + method + request_path + body
    mac = hmac.new(bytes(OKX_SECRET_KEY, 'utf-8'), bytes(message, 'utf-8'), hashlib.sha256)
    return mac.digest().hex()

def okx_request(method, endpoint, params=None, body=None):
    timestamp = datetime.utcnow().isoformat("T", "milliseconds") + "Z"
    request_path = endpoint
    if method == "GET" and params:
        request_path += "?" + "&".join([f"{k}={v}" for k, v in params.items()])
    
    body_str = json.dumps(body) if body else ""
    sign = okx_signature(timestamp, method, request_path, body_str)
    
    headers = {
        'OK-ACCESS-KEY': OKX_API_KEY,
        'OK-ACCESS-SIGN': sign,
        'OK-ACCESS-TIMESTAMP': timestamp,
        'OK-ACCESS-PASSPHRASE': OKX_PASSPHRASE,
        'Content-Type': 'application/json'
    }

    url = OKX_BASE_URL + request_path
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, timeout=10)
        else: # POST
            response = requests.post(url, headers=headers, data=body_str, timeout=10)
        return response.json()
    except Exception as e:
        print(f"‚ùå L·ªói OKX API Request: {e}")
        return None

def set_leverage(symbol, leverage):
    endpoint = "/api/v5/account/set-leverage"
    body = {"instId": symbol, "lever": str(leverage), "mgnMode": "isolated"}
    return okx_request("POST", endpoint, body=body)

def place_order(symbol, side, price, sl_price, tp_price, size):
    leverage_result = set_leverage(symbol, LEVERAGE)
    if not leverage_result or leverage_result.get('code') != '0':
        print(f"‚ùå L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {leverage_result}")
        return None
        
    endpoint = "/api/v5/trade/order"
    body = {
        "instId": symbol, "tdMode": "isolated", "side": side,
        "ordType": "limit", "px": str(price), "sz": str(size),
        "slTriggerPx": str(sl_price), "slOrdPx": "-1", # L·ªánh SL Market
        "tpTriggerPx": str(tp_price), "tpOrdPx": "-1"  # L·ªánh TP Market
    }
    return okx_request("POST", endpoint, body=body)

def get_account_balance():
    endpoint = "/api/v5/account/balance"
    params = {"ccy": "USDT"}
    result = okx_request("GET", endpoint, params=params)
    if result and result.get('code') == '0' and result['data']:
        for detail in result['data'][0]['details']:
            if detail['ccy'] == 'USDT':
                return float(detail['availBal'])
    return 0
    
def calculate_position_size(position_size_usdt, entry_price):
    return round(position_size_usdt / entry_price, 6)

# ======= L·∫§Y D·ªÆ LI·ªÜU N·∫æN T·ª™ OKX =======
def fetch_last_two_candles(symbol):
    try:
        url = "https://www.okx.com/api/v5/market/history-candles"
        params = {"instId": symbol, "bar": CHART_TYPE, "limit": "2"}
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        if data['code'] != '0' or not data.get('data') or len(data['data']) < 2:
            print(f"‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu n·∫øn cho {symbol}: {data}")
            return None, None
        def parse_candle(candle_data):
            return {
                "open_time": datetime.fromtimestamp(int(candle_data[0]) / 1000, tz=ZoneInfo("UTC")),
                "open": float(candle_data[1]), "high": float(candle_data[2]),
                "low": float(candle_data[3]), "close": float(candle_data[4]),
                "volume": float(candle_data[5]),
                "close_time": datetime.fromtimestamp(int(candle_data[0]) / 1000 + (5*60-1), tz=ZoneInfo("UTC")),
                "symbol": symbol
            }
        previous_candle = parse_candle(data['data'][1])
        current_candle = parse_candle(data['data'][0])
        return previous_candle, current_candle
    except Exception as e:
        print(f"L·ªói l·∫•y n·∫øn {symbol}: {e}")
        return None, None

# ======= KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN VOLUME =======
def check_volume_condition(previous_candle, current_candle, sym_config):
    if not previous_candle or not current_candle: return False, 0
    current_volume, previous_volume = current_candle['volume'], previous_candle['volume']
    if previous_volume == 0: return current_volume > 0, 999
    
    volume_multiplier = current_volume / previous_volume
    volume_threshold = sym_config['volume_multiplier']
    
    # ƒê√É X√ìA D√íNG IN LOG V·ªÄ VOLUME CHECK
    if volume_multiplier >= volume_threshold:
        return True, volume_multiplier
    else:
        return False, volume_multiplier

# ======= PH√ÇN T√çCH N·∫æN =======
def analyze_candle(candle, volume_multiplier, sym_config):
    try:
        open_price, high_price, low_price, close_price = candle["open"], candle["high"], candle["low"], candle["close"]
        wick_threshold = sym_config['wick_threshold']
        
        print(f"\nüìä Ph√¢n t√≠ch n·∫øn {sym_config['symbol']}:")
        
        upper_wick = high_price - max(open_price, close_price)
        upper_wick_percent = (upper_wick / max(open_price, close_price)) * 100 if max(open_price, close_price) > 0 else 0
        
        lower_wick = min(open_price, close_price) - low_price
        lower_wick_percent = (lower_wick / low_price) * 100 if low_price > 0 else 0
        
        print(f"   R√¢u tr√™n: {upper_wick_percent:.4f}%, R√¢u d∆∞·ªõi: {lower_wick_percent:.4f}%")
        
        candle_type, trend_direction = "other", "Sideways"
        if (close_price < open_price and upper_wick_percent > wick_threshold and lower_wick_percent < SMALL_WICK_THRESHOLD):
            candle_type, trend_direction = "R√¢u n·∫øn tr√™n", "Short"
            print(f"   ‚ö° PH√ÅT HI·ªÜN: R√¢u n·∫øn tr√™n - T√≠n hi·ªáu Short (Ng∆∞·ª°ng: {wick_threshold}%)")
        elif (close_price > open_price and lower_wick_percent > wick_threshold and upper_wick_percent < SMALL_WICK_THRESHOLD):
            candle_type, trend_direction = "R√¢u n·∫øn d∆∞·ªõi", "Long"
            print(f"   ‚ö° PH√ÅT HI·ªÜN: R√¢u n·∫øn d∆∞·ªõi - T√≠n hi·ªáu Long (Ng∆∞·ª°ng: {wick_threshold}%)")
        else:
            print(f"   ‚ûñ Kh√¥ng c√≥ t√≠n hi·ªáu r√¢u n·∫øn (Ng∆∞·ª°ng: {wick_threshold}%)")

        return {
            "candle_type": candle_type, "open": open_price, "high": high_price,
            "low": low_price, "close": close_price, "volume": candle['volume'],
            "upper_wick_percent": round(upper_wick_percent, 4),
            "lower_wick_percent": round(lower_wick_percent, 4), 
            "trend_direction": trend_direction, "volume_multiplier": round(volume_multiplier, 2)
        }
    except Exception as e:
        print(f"L·ªói ph√¢n t√≠ch n·∫øn {sym_config['symbol']}: {e}")
        return None

# ======= TH·ª∞C HI·ªÜN L·ªÜNH GIAO D·ªäCH =======
def execute_trade(sym_config, analysis, candle):
    try:
        entry_price = analysis['close']
        balance = get_account_balance()
        position_size_usdt = sym_config['position_size_usdt']
        rr_ratio = sym_config['rr_ratio']

        if balance < position_size_usdt:
            print(f"‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß: {balance:.2f} USDT (c·∫ßn {position_size_usdt} USDT)")
            send_slack_balance_alert(sym_config, balance)
            return None
        
        position_size = calculate_position_size(position_size_usdt, entry_price)
        
        side, sl_price, tp_price = None, None, None
        if analysis['candle_type'] == "R√¢u n·∫øn tr√™n":
            side = "sell"
            sl_price = analysis['high']
            risk = sl_price - entry_price
            tp_price = entry_price - (risk * rr_ratio)
        elif analysis['candle_type'] == "R√¢u n·∫øn d∆∞·ªõi":
            side = "buy"
            sl_price = analysis['low']
            risk = entry_price - sl_price
            tp_price = entry_price + (risk * rr_ratio)
        
        if not side: return None

        print(f"üéØ ƒê·∫∑t l·ªánh {side.upper()} {sym_config['symbol']}")
        print(f"   K√≠ch th∆∞·ªõc: {position_size_usdt} USDT, S·ªë l∆∞·ª£ng: {position_size}")
        print(f"   Entry: {entry_price:.8f}, SL: {sl_price:.8f}, TP: {tp_price:.8f}, R:R: 1:{rr_ratio}")

        order_result = place_order(sym_config['symbol'], side, entry_price, sl_price, tp_price, position_size)
        
        if order_result and order_result.get('code') == '0':
            print(f"‚úÖ L·ªánh {side} th√†nh c√¥ng cho {sym_config['symbol']}")
            return {'entry_price': entry_price, 'stop_loss': sl_price, 'take_profit': tp_price, 'size': position_size, 'side': side}
        else:
            print(f"‚ùå L·ªói ƒë·∫∑t l·ªánh: {order_result}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói th·ª±c hi·ªán l·ªánh: {e}")
        return None

# ======= TRADING BOT TASK =======
last_checked_candle_time = None

def trading_bot_task():
    """H√†m th·ª±c hi·ªán c√¥ng vi·ªác trading"""
    global last_checked_candle_time
    print("üîç ƒêang ki·ªÉm tra d·ªØ li·ªáu...")
    
    try:
        now_utc = datetime.now(ZoneInfo("UTC"))
        current_candle_start_time = now_utc.replace(second=0, microsecond=0, minute=now_utc.minute // 5 * 5)
        
        if current_candle_start_time != last_checked_candle_time:
            last_checked_candle_time = current_candle_start_time
            print(f"\n{'='*50}\nüïí ƒêang ki·ªÉm tra n·∫øn l√∫c: {now_utc.astimezone(VIETNAM_TIMEZONE).strftime('%Y-%m-%d %H:%M:%S')}\n{'='*50}")

            for sym_config in SYMBOLS:
                previous_candle, current_candle = fetch_last_two_candles(sym_config['symbol'])
                if not current_candle: 
                    continue

                volume_condition, volume_multiplier = check_volume_condition(previous_candle, current_candle, sym_config)
                if not volume_condition:
                    print(f"‚ûñ {sym_config['symbol']} | üìä Volume kh√¥ng ƒë·∫°t ng∆∞·ª°ng.")
                    continue
                
                analysis = analyze_candle(current_candle, volume_multiplier, sym_config)
                if analysis and analysis["candle_type"] != "other":
                    print(f"‚úîÔ∏è {sym_config['symbol']} | {analysis['candle_type']}")
                    order_info = execute_trade(sym_config, analysis, current_candle)
                    send_slack_notification(sym_config, current_candle, analysis, order_info)
                else:
                    print(f"‚ûñ {sym_config['symbol']} | Volume ƒë·∫°t nh∆∞ng kh√¥ng c√≥ t√≠n hi·ªáu n·∫øn.")
            print(f"\n‚è≥ Ki·ªÉm tra xong, ch·ªù n·∫øn ti·∫øp theo...")
                
    except Exception as e:
        error_msg = f"L·ªñI TRONG TASK:\n{e}\n{traceback.format_exc()}"
        print(error_msg)
        if SLACK_WEBHOOK_URL:
            send_slack_alert(f"```{error_msg}```", is_critical=True)

def run_check():
    """H√†m ch·∫°y trading bot task trong thread ri√™ng"""
    thread = threading.Thread(target=trading_bot_task)
    thread.start()
    next_run_time = datetime.now(ZoneInfo("UTC")).replace(second=0, microsecond=0)
    next_run_time = next_run_time.replace(minute=((next_run_time.minute // 5) + 1) * 5)
    if next_run_time.minute >= 60:
        next_run_time = next_run_time.replace(hour=next_run_time.hour + 1, minute=0)
    
    return f"üü¢ ƒê√£ k√≠ch ho·∫°t ki·ªÉm tra trong n·ªÅn.\n‚è∞ L·∫ßn ch·∫°y ti·∫øp theo: {next_run_time.astimezone(VIETNAM_TIMEZONE).strftime('%H:%M:%S')}"

# ======= SCHEDULED TASK =======
def scheduled_task():
    """Ch·∫°y t·ª± ƒë·ªông v√†o c√°c khung 5 ph√∫t"""
    while True:
        now = datetime.now(ZoneInfo("UTC"))
        # Ch·∫°y v√†o gi√¢y th·ª© 5 c·ªßa m·ªói ph√∫t th·ª© 0, 5, 10, ..., 55
        if now.minute % 5 == 0 and now.second == 5:
            print(f"\n‚è∞ ƒê·∫øn gi·ªù ch·∫°y scheduled task: {now.astimezone(VIETNAM_TIMEZONE).strftime('%H:%M:%S')}")
            trading_bot_task()
            # Ch·ªù 55 gi√¢y ƒë·ªÉ tr√°nh ch·∫°y nhi·ªÅu l·∫ßn trong c√πng 1 ph√∫t
            time.sleep(55)
        else:
            time.sleep(0.5)

# ======= MAIN FUNCTION =======
def main():
    print("üü¢ Bot ƒëang ch·∫°y...")
    print(f"üìä S·ª≠ d·ª•ng API Key: {OKX_API_KEY[:8]}...{OKX_API_KEY[-4:]}")
    
    if SLACK_WEBHOOK_URL:
        send_slack_alert("Bot giao d·ªãch OKX ƒë√£ kh·ªüi ƒë·ªông", is_critical=False)
    
    # Kh·ªüi ch·∫°y scheduled task trong thread ri√™ng
    scheduler_thread = threading.Thread(target=scheduled_task, daemon=True)
    scheduler_thread.start()
    print("‚úÖ Scheduled task ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y")
    
    # T·∫°o giao di·ªán Gradio
    with gr.Blocks(title="Trading Bot") as demo:
        gr.Markdown("# ü§ñ Trading Bot - Ph√°t hi·ªán n·∫øn r√¢u & giao d·ªãch t·ª± ƒë·ªông")
        gr.Markdown("Bot s·∫Ω t·ª± ƒë·ªông ch·∫°y v√†o c√°c khung 5 ph√∫t (00:00, 00:05, 00:10, ...)")
        
        status_output = gr.Textbox(
            label="Tr·∫°ng th√°i Bot", 
            lines=10, 
            interactive=False,
            value="üü¢ Bot ƒëang ch·∫°y...\nüìä T·ª± ƒë·ªông ch·∫°y v√†o c√°c khung 5 ph√∫t\n\nNh·∫•n n√∫t 'Ch·∫°y Ki·ªÉm Tra Ngay' ƒë·ªÉ ki·ªÉm tra th·ªß c√¥ng."
        )
        run_button = gr.Button("üîÑ Ch·∫°y Ki·ªÉm Tra Ngay")
        
        run_button.click(fn=run_check, outputs=status_output)
    
    # Kh·ªüi ch·∫°y ·ª©ng d·ª•ng Gradio
    demo.launch(share=False)

if __name__ == "__main__":
    main()
    